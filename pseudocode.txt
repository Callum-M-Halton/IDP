

// CONSTANTS
const speeds = {
	tiny: _____
	low: ____
	med: _____
	high: _____
}
const modes = enum {
	start,
	approaching_symmetric_junct,
	making_right_turn,
	basic, // (basic line following)
	approaching_block_on_line,
	testing_block,
	lowering_grabber,
	approaching_tunnel,
	in_tunnel,
	approaching_right_turn_to_take,
	approaching_box,
	raising_grabber,
	doing_a_180,
	lost_line,
}

const line_end_likelihoods = enum {
	none, low, med, high, as_before
}

const SAMPLE_LENGTH = _________
const CURVING_LEFT_THRESHOLD = ________

// directions
offset_dirs = enum {none, left, right, unknown}
// extents
offset_exts = enum {none, little, mid, far}

// Hardware Commands
void set_right(speed)
void set_left(speed)
[int, int, int] get_sensors()
int get_juct_sensor()

// Not Hardware
void set_motor_speed(is_right, speed):
	if is_right:
		if motor_speeds[1] != speed:
			set_right(speed)
			motor_speeds[1] == speed
	else:
		// ...





// initial robot state dict
state = {
	motor_speeds: [0, 0],
	dir: [straight, null],
	grabber_down: False,
	sector: 0,
	// dead-reckoned and waymarked
	pos: start_pos,
	// ONLY EVER CURVING LEFT
	curving_left: False,
	avg_turns_disparity: 0,
	// List of recent motor_speeds arrays of length SAMPLE_LENGTH
	disparities_sample: [[],[]],
	state.mode = modes.start
	state.prev_mode = modes.start
	state.count_down = -1
}

//  For < line width spaced sensors
enum correct_trajectory():
// get_sensors returns an array of the line following sensor's values from left to right
	sensor_vals = get_sensors()
	line_end_likelihood = line_end_likelihoods.none
	switch sensor_vals:
		case [0, 1, 0]:
			state.line_offset = [offset_dirs.none, offset_exts.none]
			set_motor_speed(True, speeds.med)
		case [0, 1, 1]:
			state.line_offset = [offset_dirs.left, offset_exts.little]
			set_motor_speed(True, speeds.med)
		case [1, 1, 0]:
			state.line_offset = [offset_dirs.right, offset_exts.little]
			set_motor_speed(False, speeds.med)
		case [0, 0, 1]:
			state.line_offset = [offset_dirs.left, offset_exts.mid]
			set_motor_speed(True, speeds.low)
		case [1, 0, 0]:
			state.line_offset = [offset_dirs.right, offset_exts.mid]
			set_motor_speed(False, speeds.low)
		case [0, 0, 0]:
			// Only do anything if not off the line in the last correction
			if state.line_offset[1] != offset_exts.far:

				// Figure out how to drive motors
				if state.line_offset[0] = offset_dirs.left:
					set_motor_speed(True, speeds.tiny)
				elif state.line_offset[0] = offset_dirs.right:
					set_motor_speed(False, speeds.tiny)
					
				// Figure out likelihood that end of line reached
				switch state.line_offset[1]:
					case offset_exts.none:
						line_end_likelihood = line_end_likelihoods.high
					case offset_exts.little:
						line_end_likelihood = line_end_likelihoods.med
					case offset_exts.mid:
						line_end_likelihood = line_end_likelihoods.low
				state.line_offset[1] = offset_exts.far
			else:
				line_end_likelihood = line_end_likelihoods.as_before
	return line_end_likelihood;



void update_curving_left():
	state.disparities_sample.append(state.motor_speeds[1] - state.motor_speeds[0])
	// Only possible when SAMPLE_LENGTH first reached so avg must be computed from scratch
	if state.disparities_sample.length() == SAMPLE_LENGTH:
		state.avg_turns_disparity = sum(state.disparities_sample) / SAMPLE_LENGTH

	if state.disparities_sample.length() > SAMPLE_LENGTH:
		oldest_disparity = state.disparities_sample[0]
		// Remove contribution of oldest turns_disparity from avg
		state.avg_turns_disparity -= (oldest_disparity / SAMPLE_LENGTH)
		// Remove oldest turns disparity
		state.disparities_sample.pop(0)
		// Add contribution of newest disparity
		state.avg_turns_disparity += state.disparities_sample.last / SAMPLE_LENGTH

	// If turns_disparity high enough, right wheel overdriven enough to be curving right
	if state.avg_turns_disparity > CURVING_LEFT_THRESHOLD:
		if state.curving_left == False:
			// From straight to curving
			state.curving_left = True
			state.sector++
	else:
		if state.curving_left == True:
			// From curving to straight
			state.curving_left = False
			state.sector++


void loop():
	// Line Follow if in a line_following mode
	if state.mode in [approaching_symmetric_junct, basic, approaching_block_on_line, approaching_tunnel, 
			approaching_right_turn_to_take, approaching_box]:
		line_end_likelihood = correct_trajectory()
		if line_end_likelihood = line_end_likelihood.none:
			// a value of -1 indicates no countdown as we're still on the line
			state.count_down = -1
		// if as_before, a count_down will already have been set so...
		elif line_end_likelihood == line_end_likelihoods.as_before:
			// decrement it towards 0 (where it runs out)
			state.count_down -= 1
			// if the timer has run out assume end of line reached and take appropriate action
			if state.count_down = 0:
				if state.mode in [approaching_box, approaching_symmetric_junct, approaching_tunnel]:
					// update sector
				// Otherwise we're not expecting an end of line so we've actually LOST THE LINE!!!
				else:
					// we have lost the line
					state.prev_mode = state.mode
					state.mode = modes.lost_line
		// We have just moved off of the line and need to set a timer to wait to determine if end of line reached
		else:
			// The higher the likelihood the lower the count_down set 
			// e.g. state.count_down = 1 for line_end_likelihoods.high
			state.count_down = count_downs_by_line_end_likelihood[line_end_likelihood]
		
			
	// FIGURE OUT IF WE'RE CURVING LEFT
	update_curving_left()












